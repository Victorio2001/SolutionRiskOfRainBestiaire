// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiskOfRain.DataContext;

#nullable disable

namespace RiskOfRain.DataContext.Migrations
{
    [DbContext(typeof(RiskOfRainContext))]
    [Migration("20250130190921_AspNetIdentity")]
    partial class AspNetIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiskOfRain.Model.Attaque", b =>
                {
                    b.Property<int>("IdAttaque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttaque"));

                    b.Property<int>("CoutPointCombat")
                        .HasColumnType("int");

                    b.Property<int>("Magie")
                        .HasColumnType("int");

                    b.Property<string>("NomAttaque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Physique")
                        .HasColumnType("int");

                    b.HasKey("IdAttaque");

                    b.ToTable("Attaques");

                    b.HasData(
                        new
                        {
                            IdAttaque = 1,
                            CoutPointCombat = 5,
                            Magie = 0,
                            NomAttaque = "Charge",
                            Physique = 40
                        },
                        new
                        {
                            IdAttaque = 2,
                            CoutPointCombat = 15,
                            Magie = 65,
                            NomAttaque = "FireBall",
                            Physique = 0
                        },
                        new
                        {
                            IdAttaque = 3,
                            CoutPointCombat = 10,
                            Magie = 0,
                            NomAttaque = "FirePunch",
                            Physique = 60
                        });
                });

            modelBuilder.Entity("RiskOfRain.Model.AttaqueMonstre", b =>
                {
                    b.Property<int>("IdAttaqueMonstre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttaqueMonstre"));

                    b.Property<int>("IdAttaque")
                        .HasColumnType("int");

                    b.Property<int>("IdMonstre")
                        .HasColumnType("int");

                    b.HasKey("IdAttaqueMonstre");

                    b.HasIndex("IdAttaque");

                    b.HasIndex("IdMonstre");

                    b.ToTable("AttaqueMonstre");

                    b.HasData(
                        new
                        {
                            IdAttaqueMonstre = 1,
                            IdAttaque = 1,
                            IdMonstre = 1
                        },
                        new
                        {
                            IdAttaqueMonstre = 2,
                            IdAttaque = 2,
                            IdMonstre = 1
                        });
                });

            modelBuilder.Entity("RiskOfRain.Model.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RiskOfRain.Model.Monstre", b =>
                {
                    b.Property<int>("IdMonstre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMonstre"));

                    b.Property<string>("CouleurMonstre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomMonstre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointCombatMonstre")
                        .HasColumnType("int");

                    b.Property<int>("PvMaxMonstre")
                        .HasColumnType("int");

                    b.Property<int>("PvMonstre")
                        .HasColumnType("int");

                    b.Property<string>("TypeMonstre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMonstre");

                    b.ToTable("Monstres");

                    b.HasData(
                        new
                        {
                            IdMonstre = 1,
                            CouleurMonstre = "Rouge",
                            NomMonstre = "Alpha Construct",
                            PointCombatMonstre = 55,
                            PvMaxMonstre = 125,
                            PvMonstre = 100,
                            TypeMonstre = "Mutant"
                        },
                        new
                        {
                            IdMonstre = 2,
                            CouleurMonstre = "Bleu",
                            NomMonstre = "Alloy Vulture",
                            PointCombatMonstre = 120,
                            PvMaxMonstre = 180,
                            PvMonstre = 180,
                            TypeMonstre = "Mage"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RiskOfRain.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RiskOfRain.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskOfRain.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RiskOfRain.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiskOfRain.Model.AttaqueMonstre", b =>
                {
                    b.HasOne("RiskOfRain.Model.Attaque", "Attaque")
                        .WithMany("AttaqueMonstre")
                        .HasForeignKey("IdAttaque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskOfRain.Model.Monstre", "Monstre")
                        .WithMany("AttaqueMonstre")
                        .HasForeignKey("IdMonstre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attaque");

                    b.Navigation("Monstre");
                });

            modelBuilder.Entity("RiskOfRain.Model.Attaque", b =>
                {
                    b.Navigation("AttaqueMonstre");
                });

            modelBuilder.Entity("RiskOfRain.Model.Monstre", b =>
                {
                    b.Navigation("AttaqueMonstre");
                });
#pragma warning restore 612, 618
        }
    }
}
